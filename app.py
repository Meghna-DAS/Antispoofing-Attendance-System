# Code Generated by Sidekick is for learning and experimentation purposes only.
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
import cv2
import json
import time
import os
from database import AttendanceDB
from detector import AntiSpoofDetector

app = Flask(__name__)
app.secret_key = 'your-secret-key-here-change-this-to-random-string'

# Initialize database
db = AttendanceDB()

# DEBUG: Test database connection immediately
print("🔍 DEBUG: Testing database connection...")
try:
    test_students = db.get_students()
    print(f"🔍 DEBUG: Database has {len(test_students)} students")
    if len(test_students) == 0:
        print("⚠️  WARNING: No students in database! Add some students first.")
        print("📝 Go to: http://127.0.0.1:5000/add_student to add students")
    else:
        for i, student in enumerate(test_students):
            print(f"🔍 DEBUG: Student {i+1}: {student}")
except Exception as e:
    print(f"❌ ERROR: Database connection failed: {e}")

@app.route('/')
def index():
    """Home page with student list and statistics"""
    try:
        print("🔍 DEBUG: Index route called - Fetching students from database...")
        students = db.get_students()
        print(f"🔍 DEBUG: Found {len(students)} students")
        
        # Print each student for debugging
        if len(students) == 0:
            print("⚠️  DEBUG: NO STUDENTS FOUND! Database is empty.")
            print("📝 User needs to add students first at /add_student")
        else:
            for i, student in enumerate(students):
                print(f"🔍 DEBUG: Student {i+1}: {student}")
        
        print("🔍 DEBUG: Fetching statistics...")
        stats = db.get_statistics()
        print(f"🔍 DEBUG: Stats: {stats}")
        
        return render_template('index.html', students=students, stats=stats)
    except Exception as e:
        print(f"❌ ERROR in index route: {str(e)}")
        import traceback
        traceback.print_exc()
        return render_template('index.html', students=[], stats={
            'total_students': 0,
            'total_records': 0,
            'present_count': 0,
            'spoofing_count': 0,
            'no_face_count': 0,
            'success_rate': 0
        }, error=str(e))

@app.route('/records')
def records():
    """View attendance records page"""
    try:
        print("🔍 DEBUG: Records route called")
        records = db.get_records()
        print(f"🔍 DEBUG: Found {len(records)} records")
        
        # Debug: Print first few records
        if len(records) == 0:
            print("⚠️ DEBUG: NO RECORDS FOUND! User needs to mark attendance first.")
        else:
            for i, record in enumerate(records[:3]):
                print(f"🔍 DEBUG: Record {i+1}: {record}")
        
        stats = db.get_statistics()
        return render_template('records.html', records=records, stats=stats)
    except Exception as e:
        print(f"❌ ERROR in records route: {e}")
        return render_template('records.html', records=[], stats={}, error=str(e))

@app.route('/add_student')
def add_student_page():
    """Show add student form page"""
    print("🔍 DEBUG: Add student page accessed")
    return render_template('add_student.html')

@app.route('/add_student', methods=['POST'])
def add_student():
    """Add new student - handles both JSON and form data"""
    try:
        print("🔍 DEBUG: Add student POST request received")
        
        # Handle both JSON and form data
        if request.is_json:
            # JSON request from JavaScript
            data = request.get_json()
            name = data.get('name')
            student_id = data.get('student_id')
            email = data.get('email', '')
            print(f"🔍 DEBUG: JSON data - Name: {name}, ID: {student_id}, Email: {email}")
        else:
            # Form data request (traditional form submission)
            name = request.form.get('name')
            student_id = request.form.get('student_id')
            email = request.form.get('email', '')
            print(f"🔍 DEBUG: Form data - Name: {name}, ID: {student_id}, Email: {email}")
        
        # Validate required fields
        if not name or not student_id:
            error_msg = 'Name and Student ID are required'
            print(f"❌ DEBUG: Validation failed - {error_msg}")
            if request.is_json:
                return jsonify({'success': False, 'message': error_msg})
            else:
                flash(error_msg, 'error')
                return redirect(url_for('add_student_page'))
        
        # Clean and validate input
        name = name.strip()
        student_id = student_id.strip().upper()
        email = email.strip() if email else ''
        
        print(f"🔍 DEBUG: Cleaned data - Name: '{name}', ID: '{student_id}', Email: '{email}'")
        
        # Validate student ID format (optional - customize as needed)
        if len(student_id) < 3:
            message = 'Student ID must be at least 3 characters long'
            print(f"❌ DEBUG: ID validation failed - {message}")
            if request.is_json:
                return jsonify({'success': False, 'message': message})
            else:
                flash(message, 'error')
                return redirect(url_for('add_student_page'))
        
        # Add student to database
        print(f"🔍 DEBUG: Attempting to add student to database...")
        success = db.add_student(name, student_id, email)
        print(f"🔍 DEBUG: Database add_student result: {success}")
        
        if success:
            message = f'Student {name} (ID: {student_id}) added successfully!'
            print(f"✅ DEBUG: {message}")
            
            # Verify student was added
            updated_students = db.get_students()
            print(f"🔍 DEBUG: Database now has {len(updated_students)} students")
            
            if request.is_json:
                return jsonify({'success': True, 'message': message})
            else:
                flash(message, 'success')
                return redirect(url_for('index'))
        else:
            message = f'Student ID {student_id} already exists. Please use a different ID.'
            print(f"❌ DEBUG: {message}")
            if request.is_json:
                return jsonify({'success': False, 'message': message})
            else:
                flash(message, 'error')
                return redirect(url_for('add_student_page'))
            
    except Exception as e:
        error_message = f'Error adding student: {str(e)}'
        print(f"❌ DEBUG: Exception in add_student: {error_message}")
        import traceback
        traceback.print_exc()
        
        if request.is_json:
            return jsonify({'success': False, 'message': error_message})
        else:
            flash(error_message, 'error')
            return redirect(url_for('add_student_page'))

@app.route('/warm_camera', methods=['POST'])
def warm_camera():
    """Pre-warm camera for faster detection"""
    camera = None
    try:
        print("🔥 Pre-warming camera...")
        camera = cv2.VideoCapture(0)
        
        if not camera.isOpened():
            return jsonify({'success': False, 'message': 'Camera not available'})
        
        # Quick optimized settings
        camera.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        camera.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
        camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
        camera.set(cv2.CAP_PROP_FPS, 15)
        
        # Read a few frames to warm up
        frames_read = 0
        for i in range(5):
            ret, frame = camera.read()
            if ret:
                frames_read += 1
                print(f"🔥 Warm-up frame {i+1}/5 - Success")
            else:
                print(f"🔥 Warm-up frame {i+1}/5 - Failed")
        
        camera.release()
        camera = None
        
        return jsonify({
            'success': True, 
            'message': f'🔥 Camera warmed up! Read {frames_read}/5 frames. Detection will be faster now.',
            'frames_read': frames_read
        })
        
    except Exception as e:
        print(f"❌ Camera warm-up error: {e}")
        return jsonify({'success': False, 'message': f'Warm-up error: {str(e)}'})
    finally:
        if camera is not None:
            try:
                camera.release()
            except:
                pass

@app.route('/start_detection', methods=['POST'])
def start_detection():
    """Start anti-spoofing detection for selected student - OPTIMIZED VERSION"""
    camera = None
    try:
        print("🔍 DEBUG: start_detection route called")
        
        # Handle both JSON and form data
        if request.is_json:
            data = request.get_json()
            student_id = data.get('student_id')
            student_name = data.get('student_name')
            print(f"🔍 DEBUG: JSON data - ID: {student_id}, Name: {student_name}")
        else:
            student_id = request.form.get('student_id')
            student_name = request.form.get('student_name')
            print(f"🔍 DEBUG: Form data - ID: {student_id}, Name: {student_name}")
        
        # Validate student_id is provided
        if not student_id:
            return jsonify({'success': False, 'message': 'Please select a student from the dropdown'})
        
        # Get student info from database if name not provided
        if not student_name:
            print(f"🔍 DEBUG: Looking up student name...")
            student = db.get_student_by_id(student_id)
            if student:
                student_name = student['name']
                print(f"🔍 DEBUG: Found student name: {student_name}")
            else:
                return jsonify({'success': False, 'message': f'Student with ID {student_id} not found'})
        
        print(f"🔍 DEBUG: Starting FAST detection for {student_name} ({student_id})")
        
        # ⚡ OPTIMIZED CAMERA INITIALIZATION
        print("📷 Initializing camera with optimized settings...")
        camera = cv2.VideoCapture(0)
        
        # Set buffer size to 1 for faster processing
        camera.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        # Lower resolution for faster processing
        camera.set(cv2.CAP_PROP_FRAME_WIDTH, 320)   # Reduced from 640
        camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)  # Reduced from 480
        camera.set(cv2.CAP_PROP_FPS, 15)            # Reduced from 30
        
        # Additional optimizations
        try:
            camera.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'))
        except:
            pass  # Some cameras don't support this
        
        if not camera.isOpened():
            return jsonify({'success': False, 'message': 'Camera not available. Please check connection.'})
        
        # ⚡ WARM UP CAMERA (read a few frames to stabilize)
        print("🔥 Warming up camera...")
        for i in range(3):
            ret, frame = camera.read()
            if not ret:
                print(f"⚠️ Warm-up frame {i+1} failed")
                break
            else:
                print(f"✅ Warm-up frame {i+1} success")
        
        # Initialize detector
        detector = AntiSpoofDetector()
        
        # ⚡ FASTER DETECTION PROCESS
        start_time = time.time()
        detection_duration = 3  # Reduced from 5 seconds
        frames_processed = 0
        face_detected_count = 0
        max_frames = 30  # Limit total frames processed
        
        print(f"🔍 DEBUG: Starting {detection_duration}s FAST detection...")
        
        while (time.time() - start_time < detection_duration) and (frames_processed < max_frames):
            ret, frame = camera.read()
            if not ret:
                print("❌ DEBUG: Failed to read frame")
                break
            
            # ⚡ SKIP FRAMES FOR FASTER PROCESSING
            if frames_processed % 2 == 0:  # Process every 2nd frame only
                result = detector.analyze_frame(frame)
                if result['face_detected']:
                    face_detected_count += 1
                    print(f"👤 Face detected in frame {frames_processed}")
            
            frames_processed += 1
            
            # Smaller delay for faster processing
            time.sleep(0.05)  # Reduced from 0.1
        
        # Clean up camera immediately
        camera.release()
        camera = None
        
        print(f"🔍 DEBUG: FAST detection completed - {frames_processed} frames, {face_detected_count} with faces")
        
        # Determine result based on detection
        if face_detected_count == 0:
            status = "NO_FACE_DETECTED"
            details = "No face detected. Please ensure you're visible to the camera."
        elif detector.is_live_person():
            status = "PRESENT"
            details = f"Live person detected - Blinks: {detector.total_blinks}, Motion: {'Yes' if detector.motion_detected else 'No'}"
        else:
            status = "SPOOFING_DETECTED"
            details = f"Possible spoofing - Blinks: {detector.total_blinks}, Motion: {'Yes' if detector.motion_detected else 'No'}"
        
        print(f"🔍 DEBUG: Result - Status: {status}")
        
        # Save to database
        print(f"🔍 DEBUG: Saving to database...")
        db.mark_attendance(
            student_name=student_name,
            student_id=student_id,
            status=status,
            blinks=detector.total_blinks,
            motion_detected=detector.motion_detected,
            details=details
        )
        print(f"✅ DEBUG: Attendance saved for {student_name}")
        
        return jsonify({
            'success': True,
            'status': status,
            'blinks': detector.total_blinks,
            'motion': detector.motion_detected,
            'details': details,
            'frames_processed': frames_processed,
            'face_detection_rate': f"{(face_detected_count/frames_processed)*100:.1f}%" if frames_processed > 0 else "0%",
            'message': f'✅ Fast detection completed for {student_name}',
            'processing_time': f"{time.time() - start_time:.1f}s"
        })
        
    except Exception as e:
        print(f"❌ DEBUG: Exception in start_detection: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': f'Detection error: {str(e)}'})
    
    finally:
        # Ensure camera is always released
        if camera is not None:
            try:
                camera.release()
                print("📷 Camera released")
            except:
                pass

@app.route('/get_students')
def get_students():
    """API endpoint to get all students"""
    try:
        students = db.get_students()
        return jsonify({'success': True, 'students': students})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)})

@app.route('/clear_records', methods=['POST'])
def clear_records():
    """Clear all attendance records"""
    try:
        db.clear_records()
        return jsonify({'success': True, 'message': 'All attendance records cleared successfully!'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error clearing records: {str(e)}'})

@app.route('/delete_student/<student_id>', methods=['POST'])
def delete_student(student_id):
    """Delete a student and their records"""
    try:
        success = db.delete_student(student_id)
        if success:
            return jsonify({'success': True, 'message': f'Student {student_id} deleted successfully!'})
        else:
            return jsonify({'success': False, 'message': f'Student {student_id} not found'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error deleting student: {str(e)}'})

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'message': 'Anti-Spoofing Attendance System is running',
        'timestamp': time.time()
    })

# ADD THIS NEW ROUTE FOR DEBUGGING RECORDS
@app.route('/add_test_record')
def add_test_record():
    """Add a test attendance record for debugging"""
    try:
        print("🔍 DEBUG: Adding test record...")
        
        # First, make sure we have a test student
        students = db.get_students()
        test_student_exists = any(s.get('student_id') == 'TEST001' for s in students)
        
        if not test_student_exists:
            print("🔍 DEBUG: Adding test student first...")
            db.add_student("Test Student", "TEST001", "test@example.com")
        
        # Add a test attendance record
        db.mark_attendance(
            student_name="Test Student",
            student_id="TEST001",
            status="PRESENT",
            blinks=3,
            motion_detected=True,
            details="Test record created for debugging - Live person detected"
        )
        
        print("✅ DEBUG: Test record added successfully!")
        
        # Verify it was added
        records = db.get_records()
        print(f"🔍 DEBUG: Database now has {len(records)} total records")
        
        return jsonify({
            'success': True,
            'message': f'✅ Test record added! Database now has {len(records)} records. Check /records page.',
            'total_records': len(records)
        })
        
    except Exception as e:
        print(f"❌ DEBUG: Error adding test record: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Error: {str(e)}'
        })

@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    return render_template('500.html'), 500

if __name__ == '__main__':
    # Create necessary directories
    os.makedirs('static', exist_ok=True)
    os.makedirs('templates', exist_ok=True)
    
    print("🚀 Starting Anti-Spoofing Attendance System...")
    print("📱 Access the application at: http://127.0.0.1:5000")
    print("🔧 Debug mode: ON")
    print("⚡ OPTIMIZED VERSION - Faster camera startup!")
    print("🔍 DEBUG: Added test record route at /add_test_record")
    
    app.run(debug=True, host='127.0.0.1', port=5000, threaded=True)
